You are given two four digit prime numbers num1 and num2. Find the distance of the shortest path from Num1 to Num2 that can be attained by altering only single digit at a time such that every number that we get after changing a digit is a four digit prime number with no leading zeros.
CODE:

class Solution{   
public:
    int solve(int num1,int num2)
    {   
      //code 
      //sieve
      vector<bool> prime(10000,true);
      for(int i=2;i<(10000);i++){
          if(prime[i]){
              for(int j=i*i;j<10000;j+=i){
                  prime[j]=false;
              }
          }
      }
      
      vector<int> res(10000,-1);//-1 means not visited
      res[num1]=0;//0 steps to reach num1
      
      queue<int> qu;
      qu.push(num1);//num 1 is prime
      while(!qu.empty()){
          int curr=qu.front();
          qu.pop();
          if(curr==num2){
              return res[num2];
          }
          for(int i=0;i<4;i++){
            // i is position to  be changed and since 4 digit so 
            for(int j=0;j<10;j++){
                //  j represents the replaced digit
                if(i==0 && j==0)continue;
                string cur=to_string(curr);//convert to string
                string ncur=cur.substr(0,i)+to_string(j)+cur.substr(i+1);
                int ncurr=stoi(ncur);
                if(ncurr>=1000 && prime[ncurr] && res[ncurr]==-1){
                    res[ncurr]=res[curr]+1;
                    qu.push(ncurr);
                }
            }
          }
      }
      return -1;
    }
};
