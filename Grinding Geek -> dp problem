GeeksforGeeks has introduced a special offer where you can enroll in any course, and if you manage to complete 90% of the course within 90 days, you will receive a refund of 90%.

Geek was fascinated by this offer. This offer was valid for only n days, and each day a new course was available for purchase. Geek decided that if he bought a course on some day, he will complete that course on the same day itself and redeem floor[90% of cost of the course] amount back. Find the maximum number of courses that Geek can complete in those n days if he had total amount initially.

Note: On any day, Geek can only buy the new course that was made available for purchase that day.

CODE:
class Solution{
    public:
    int solution(int n,int total, vector<int>&cost,int i,vector<vector<int>>& dp){
        if(i==n){
           return 0;
       }
       //pick or no pick if total >cost
       //if total less no pick
       if(dp[i][total]!=-1){
           return dp[i][total];
       }
       if(total>=cost[i]){
           // let first pick
           int price = (total-cost[i]) + ((9*cost[i])/10);
           return dp[i][total]=max(1+solution(n,price,cost,i+1,dp),solution(n,total,cost,i+1,dp));
       }
       else{
           return dp[i][total]=solution(n,total,cost,i+1,dp);
       }
    }
    int max_courses(int n, int total, vector<int> &cost)
    {
         vector<vector<int>> dp(n, vector<int>(total + 1, -1));
        return solution(n,total,cost,0,dp);
       
      
      
    }
};
