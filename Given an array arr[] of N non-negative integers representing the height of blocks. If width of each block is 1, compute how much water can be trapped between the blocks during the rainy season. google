Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 
CODE:
class Solution{

    // Function to find the trapped water between the blocks.
    public:
    long long trappingWater(int arr[], int n){
        // code here
        vector<int>left(n,0);
        vector<int>right(n,0);
        left[0]=arr[0];
        int mx=arr[0];
        for(int i=1;i<n;i++){
            mx=max(arr[i],mx);
            left[i]=mx;
        }
        int mx2=arr[n-1];
        for(int i=n-1;i>=0;i--){
            mx2=max(arr[i],mx2);
            right[i]=mx2;
        }
        long long  ans=0;
        for(int i=0;i<n;i++){
            ans+=(min(left[i],right[i])-arr[i]);
        }
        return ans;
    }
};
