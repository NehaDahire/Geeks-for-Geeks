Detect Cycle using DSU Problem of the day->27 november 2023
code:
int find_set(int x,vector<int>& parent,vector<int>& size){
    if(x==parent[x]){
        
        return x;
                      
    }
    else{
        return parent[x]=find_set(parent[x],parent,size);
    }
}
void make_union(int a, int b, vector<int>& parent,vector<int>& size){
    //we append smaller(b) to larger as reverse increases time complexity
     a = find_set(a,parent,size);
     b = find_set(b,parent,size);
    if(a!=b){
        if(size[a]<size[b]){
              swap(a,b);
        }
        parent[b]=a;
        size[a]+=size[b];//path compression
    }
   
}

class Solution
{
    public:
    //Function to detect cycle using DSU in an undirected graph.
  
	int detectCycle(int V, vector<int>adj[])
	{
	    // Code here
	      bool flag=false;
	    vector<int> parent(V);
	    vector<int> size(V);
	    for(int i =0; i< V;i++){
	        parent[i]=i;
	        size[i]=1;
	    }
	     
	        for (int i = 0; i < V; i++) {
            for (int v : adj[i]) {
                // Ensure each edge is considered only once
                if (i < v) {
                    int u = i;
                    int a = find_set(u, parent, size);
                    int b = find_set(v, parent, size);
                    if (a == b) {
                        flag = true;
                    } else {
                        make_union(u, v, parent, size);
                    }
                }
            }
        }
	    if(flag){
	        return 1;
	    }
	    else{
	        return 0;
	    }
	       
	   
	}
	
};
